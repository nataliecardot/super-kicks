*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: 'Noto Sans JP', sans-serif;
  line-height: 1.6;
}

img {
  max-width: 100%;
  display: block;
}

h1,
h2,
h3,
p {
  margin: 0;
}

section {
  padding: 7rem 0;
}

.container {
  width: 85%;
  /* 65 x 16 */
  max-width: 65em;
  margin: 0 auto;
}

.split {
  display: flex;
  gap: 1em; // Flex layout gap now supported in all major browsers (Safari added to the list 4/21)
  flex-wrap: wrap;
  justify-content: center;

  // & always refers to the parent selector when nesting. Think of the & as being removed and replaced with the parent selector
  & > * {
    flex-basis: 30%;
    min-width: 15em; // 240
  }
}

// Adjacent sibling of a direct child of .spacing
// Only applied to children that have a sibling before them
.spacing > * + * {
  margin-top: var(--spacer, 2rem);
}

.btn {
  /* .btn is given to a elements, which are inline. With default inline, while you can apply padding top and bottom, it doesn't actually affect the flow; it can cause overlap. Plus, with inline-block, you can apply a margin top and bottom */
  display: inline-block;
  font-weight: 700;
  text-decoration: none;
  /* text-transform: uppercase; */
  font-size: 1.125rem;
  color: var(--clr-text, #fff);
  background: var(--clr-accent, #0a6ab6);
  padding: 0.5em 1.25em;
  border-radius: 0.25em;
  /* ease is default transition-timing-function */
  transition: transform 250ms ease-in-out, opacity 250ms linear;
}

.btn:hover,
.btn:focus {
  transform: scale(1.1);
  opacity: 0.9;
}

.primary-title {
  font-size: 4rem;
  /* min, preferred, max. returns preferred value until it exceeds min/max, then it returns min/max */
  font-size: clamp(3rem, calc(5vw + 1rem), 4.5rem);
  line-height: 1.1;
  text-transform: uppercase;
}

.section-title {
  text-align: center;
  font-size: clamp(2.5rem, calc(5vw + 1rem), 4rem);
  line-height: 1;
  color: #17353d;
  margin-bottom: 5rem;
}

.hero {
  color: #fff;
  text-align: center;
  padding: 15em 0;
  background: #222; /* Fallback if backgroung-blend-mode not supported and/or @supports feature query not recognized */
  // Can nest this thanks to using SCSS
  @supports (background-blend-mode: multiply) {
    background: url('../img/shoe-3.png'), radial-gradient(#444, #111);
    background-blend-mode: multiply;
    background-attachment: fixed;
    background-repeat: no-repeat;
    background-position: center;
  }
  /* Try this for pattern */
  /* background-size: 10%; */
}

// // Format if were using regular CSS
// @supports (property: value) {
//   .hero { }
// }

.featured {
  background: #eee;

  &__item {
    display: block;
    position: relative;
    transform: scale(0.85);
    transition: transform 250ms ease-in-out; // Default: ease
    text-decoration: none;
    color: #333;
    text-align: center;
    line-height: 1.2;

    &:hover,
    &:focus {
      transform: scale(1);

      .featured__details {
        opacity: 1;
      }
    }

    &::after {
      // Any time you have a pseudoelement, you need to give it content to make it exist
      content: '';
      position: absolute;
      // Padding as a percent is percent of parent's width, not element that has padding
      // Same with margins: if you do margin-top of 100%, it's based on width of its parent
      padding: 75% 75% 0 0;
      top: 10%;
      left: 10%;
      border-radius: 50%;
      background: #2193b0;
      // This -1 is within stacking context created by transforms, rather than being within scope of whole site. Without transforms, it goes behind gray background
      z-index: -1;
    }
  }

  &__details {
    opacity: 0;
    transition: opacity 250ms linear;

    span {
      display: block;
      font-weight: 700;
      font-size: 2.25rem;
    }
  }
}

.product {
  background: radial-gradient(
    var(--clr-inner, purple),
    var(--clr-outer, rgb(59, 53, 59))
  );
  padding: 3em;
  border-radius: 1em;
  margin-bottom: 3em;
  text-align: center;

  &__title {
    font-size: 4rem;
    line-height: 1.1;
    color: #fff;
    text-shadow: 0 0 0.2em rgba(#000, 0.2);
  }

  &:last-of-type {
    margin-bottom: 0;
  }
}

.shoe-red {
  // Since these inner and outer properties are used on product, must be declared on product (or further out, since custom properties get inherited) - shoe-red is also declared on product so it works
  --clr-inner: #faa700;
  --clr-outer: #e48d00;
  // --clr-accent is used on btn, which is a descendant of product,
  --clr-accent: #8a1232;
}

.shoe-white {
  --clr-inner: #fce4b3;
  --clr-outer: #eac886;
  --clr-accent: #2f4858;
}

.shoe-blue {
  --clr-inner: #6dd5ed;
  --clr-outer: #2193b0;
  --clr-accent: #0f5f3e;
}
